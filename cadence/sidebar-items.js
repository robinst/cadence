initSidebarItems({"constant":[["DEFAULT_PORT",""]],"enum":[["ErrorKind","Potential categories an error from this library falls into."]],"mod":[["prelude","Export commonly used parts of Cadence for easy glob imports"]],"struct":[["AsyncMetricSink","Implementation of a `MetricSink` that wraps another implementation and uses it to emit metrics asynchronously with a thread pool."],["BufferedUdpMetricSink","Implementation of a `MetricSink` that buffers metrics before sending them to a UDP socket."],["ConsoleMetricSink","Implementation of a `MetricSink` that emits metrics to the console."],["Counter","Counters are simple values incremented or decremented by a client."],["Gauge","Gauges are an instantaneous value determined by the client."],["LoggingMetricSink","Implementation of a `MetricSink` that emits metrics using the`log!` macro."],["Meter","Meters measure the rate at which events occur as determined by the server."],["MetricError","Error generated by this library potentially wrapping another type of error (exposed via the `Error` trait)."],["NopMetricSink","Implementation of a `MetricSink` that discards all metrics."],["StatsdClient","Client for Statsd that implements various traits to record metrics."],["Timer","Timers are a positive number of milliseconds between a start and end point."],["UdpMetricSink","Implementation of a `MetricSink` that emits metrics over UDP."]],"trait":[["Counted","Trait for incrementing and decrementing counters."],["Gauged","Trait for recording gauge values."],["Metered","Trait for recording meter values."],["MetricClient","Trait that encompasses all other traits for sending metrics."],["MetricSink","Trait for various backends that send Statsd metrics somewhere."],["Timed","Trait for recording timings in milliseconds."]],"type":[["MetricResult",""]]});